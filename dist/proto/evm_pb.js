/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_loom_pb = require('../proto/loom_pb.js');
goog.exportSymbol('proto.EthBlockHashList', null, global);
goog.exportSymbol('proto.EthBlockInfo', null, global);
goog.exportSymbol('proto.EthFilterEnvelope', null, global);
goog.exportSymbol('proto.EthFilterLog', null, global);
goog.exportSymbol('proto.EthFilterLogList', null, global);
goog.exportSymbol('proto.EthTxHashList', null, global);
goog.exportSymbol('proto.EventData', null, global);
goog.exportSymbol('proto.EventDataList', null, global);
goog.exportSymbol('proto.EvmTxObject', null, global);
goog.exportSymbol('proto.EvmTxReceipt', null, global);
goog.exportSymbol('proto.TxReceiptList', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthFilterEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.EthFilterEnvelope.oneofGroups_);
};
goog.inherits(proto.EthFilterEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthFilterEnvelope.displayName = 'proto.EthFilterEnvelope';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.EthFilterEnvelope.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.EthFilterEnvelope.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ETH_BLOCK_HASH_LIST: 1,
  ETH_FILTER_LOG_LIST: 2,
  ETH_TX_HASH_LIST: 3
};

/**
 * @return {proto.EthFilterEnvelope.MessageCase}
 */
proto.EthFilterEnvelope.prototype.getMessageCase = function() {
  return /** @type {proto.EthFilterEnvelope.MessageCase} */(jspb.Message.computeOneofCase(this, proto.EthFilterEnvelope.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthFilterEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.EthFilterEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthFilterEnvelope} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EthFilterEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    ethBlockHashList: (f = msg.getEthBlockHashList()) && proto.EthBlockHashList.toObject(includeInstance, f),
    ethFilterLogList: (f = msg.getEthFilterLogList()) && proto.EthFilterLogList.toObject(includeInstance, f),
    ethTxHashList: (f = msg.getEthTxHashList()) && proto.EthTxHashList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthFilterEnvelope}
 */
proto.EthFilterEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthFilterEnvelope;
  return proto.EthFilterEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthFilterEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthFilterEnvelope}
 */
proto.EthFilterEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EthBlockHashList;
      reader.readMessage(value,proto.EthBlockHashList.deserializeBinaryFromReader);
      msg.setEthBlockHashList(value);
      break;
    case 2:
      var value = new proto.EthFilterLogList;
      reader.readMessage(value,proto.EthFilterLogList.deserializeBinaryFromReader);
      msg.setEthFilterLogList(value);
      break;
    case 3:
      var value = new proto.EthTxHashList;
      reader.readMessage(value,proto.EthTxHashList.deserializeBinaryFromReader);
      msg.setEthTxHashList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EthFilterEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthFilterEnvelope.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthFilterEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthFilterEnvelope.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEthBlockHashList();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.EthBlockHashList.serializeBinaryToWriter
    );
  }
  f = this.getEthFilterLogList();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.EthFilterLogList.serializeBinaryToWriter
    );
  }
  f = this.getEthTxHashList();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EthTxHashList.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EthFilterEnvelope} The clone.
 */
proto.EthFilterEnvelope.prototype.cloneMessage = function() {
  return /** @type {!proto.EthFilterEnvelope} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional EthBlockHashList eth_block_hash_list = 1;
 * @return {proto.EthBlockHashList}
 */
proto.EthFilterEnvelope.prototype.getEthBlockHashList = function() {
  return /** @type{proto.EthBlockHashList} */ (
    jspb.Message.getWrapperField(this, proto.EthBlockHashList, 1));
};


/** @param {proto.EthBlockHashList|undefined} value  */
proto.EthFilterEnvelope.prototype.setEthBlockHashList = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.EthFilterEnvelope.oneofGroups_[0], value);
};


proto.EthFilterEnvelope.prototype.clearEthBlockHashList = function() {
  this.setEthBlockHashList(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EthFilterEnvelope.prototype.hasEthBlockHashList = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EthFilterLogList eth_filter_log_list = 2;
 * @return {proto.EthFilterLogList}
 */
proto.EthFilterEnvelope.prototype.getEthFilterLogList = function() {
  return /** @type{proto.EthFilterLogList} */ (
    jspb.Message.getWrapperField(this, proto.EthFilterLogList, 2));
};


/** @param {proto.EthFilterLogList|undefined} value  */
proto.EthFilterEnvelope.prototype.setEthFilterLogList = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.EthFilterEnvelope.oneofGroups_[0], value);
};


proto.EthFilterEnvelope.prototype.clearEthFilterLogList = function() {
  this.setEthFilterLogList(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EthFilterEnvelope.prototype.hasEthFilterLogList = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EthTxHashList eth_tx_hash_list = 3;
 * @return {proto.EthTxHashList}
 */
proto.EthFilterEnvelope.prototype.getEthTxHashList = function() {
  return /** @type{proto.EthTxHashList} */ (
    jspb.Message.getWrapperField(this, proto.EthTxHashList, 3));
};


/** @param {proto.EthTxHashList|undefined} value  */
proto.EthFilterEnvelope.prototype.setEthTxHashList = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.EthFilterEnvelope.oneofGroups_[0], value);
};


proto.EthFilterEnvelope.prototype.clearEthTxHashList = function() {
  this.setEthTxHashList(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EthFilterEnvelope.prototype.hasEthTxHashList = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthBlockHashList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthBlockHashList.repeatedFields_, null);
};
goog.inherits(proto.EthBlockHashList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthBlockHashList.displayName = 'proto.EthBlockHashList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthBlockHashList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthBlockHashList.prototype.toObject = function(opt_includeInstance) {
  return proto.EthBlockHashList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthBlockHashList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EthBlockHashList.toObject = function(includeInstance, msg) {
  var f, obj = {
    ethBlockHashList: msg.getEthBlockHashList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthBlockHashList}
 */
proto.EthBlockHashList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthBlockHashList;
  return proto.EthBlockHashList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthBlockHashList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthBlockHashList}
 */
proto.EthBlockHashList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getEthBlockHashList().push(value);
      msg.setEthBlockHashList(msg.getEthBlockHashList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EthBlockHashList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthBlockHashList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthBlockHashList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthBlockHashList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEthBlockHashList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EthBlockHashList} The clone.
 */
proto.EthBlockHashList.prototype.cloneMessage = function() {
  return /** @type {!proto.EthBlockHashList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated bytes eth_block_hash = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.EthBlockHashList.prototype.getEthBlockHashList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes eth_block_hash = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getEthBlockHashList()`
 * @return {!Array.<string>}
 */
proto.EthBlockHashList.prototype.getEthBlockHashList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getEthBlockHashList()));
};


/**
 * repeated bytes eth_block_hash = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEthBlockHashList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.EthBlockHashList.prototype.getEthBlockHashList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getEthBlockHashList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.EthBlockHashList.prototype.setEthBlockHashList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.EthBlockHashList.prototype.clearEthBlockHashList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthTxHashList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthTxHashList.repeatedFields_, null);
};
goog.inherits(proto.EthTxHashList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthTxHashList.displayName = 'proto.EthTxHashList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthTxHashList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthTxHashList.prototype.toObject = function(opt_includeInstance) {
  return proto.EthTxHashList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthTxHashList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EthTxHashList.toObject = function(includeInstance, msg) {
  var f, obj = {
    ethTxHashList: msg.getEthTxHashList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthTxHashList}
 */
proto.EthTxHashList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthTxHashList;
  return proto.EthTxHashList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthTxHashList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthTxHashList}
 */
proto.EthTxHashList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getEthTxHashList().push(value);
      msg.setEthTxHashList(msg.getEthTxHashList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EthTxHashList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthTxHashList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthTxHashList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthTxHashList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEthTxHashList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EthTxHashList} The clone.
 */
proto.EthTxHashList.prototype.cloneMessage = function() {
  return /** @type {!proto.EthTxHashList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated bytes eth_tx_hash = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.EthTxHashList.prototype.getEthTxHashList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes eth_tx_hash = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getEthTxHashList()`
 * @return {!Array.<string>}
 */
proto.EthTxHashList.prototype.getEthTxHashList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getEthTxHashList()));
};


/**
 * repeated bytes eth_tx_hash = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEthTxHashList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.EthTxHashList.prototype.getEthTxHashList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getEthTxHashList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.EthTxHashList.prototype.setEthTxHashList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.EthTxHashList.prototype.clearEthTxHashList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventDataList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EventDataList.repeatedFields_, null);
};
goog.inherits(proto.EventDataList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventDataList.displayName = 'proto.EventDataList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EventDataList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventDataList.prototype.toObject = function(opt_includeInstance) {
  return proto.EventDataList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventDataList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EventDataList.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.EventData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventDataList}
 */
proto.EventDataList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventDataList;
  return proto.EventDataList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventDataList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventDataList}
 */
proto.EventDataList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EventData;
      reader.readMessage(value,proto.EventData.deserializeBinaryFromReader);
      msg.getEventsList().push(value);
      msg.setEventsList(msg.getEventsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EventDataList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EventDataList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventDataList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EventDataList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.EventData.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EventDataList} The clone.
 */
proto.EventDataList.prototype.cloneMessage = function() {
  return /** @type {!proto.EventDataList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated EventData events = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.EventData>}
 */
proto.EventDataList.prototype.getEventsList = function() {
  return /** @type{!Array.<!proto.EventData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EventData, 1));
};


/** @param {Array.<!proto.EventData>} value  */
proto.EventDataList.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.EventDataList.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EventData.repeatedFields_, null);
};
goog.inherits(proto.EventData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventData.displayName = 'proto.EventData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EventData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventData.prototype.toObject = function(opt_includeInstance) {
  return proto.EventData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EventData.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicsList: jspb.Message.getField(msg, 1),
    caller: (f = msg.getCaller()) && proto_loom_pb.Address.toObject(includeInstance, f),
    address: (f = msg.getAddress()) && proto_loom_pb.Address.toObject(includeInstance, f),
    pluginName: msg.getPluginName(),
    blockHeight: msg.getBlockHeight(),
    encodedBody: msg.getEncodedBody_asB64(),
    originalRequest: msg.getOriginalRequest_asB64(),
    txHash: msg.getTxHash_asB64(),
    transactionIndex: msg.getTransactionIndex(),
    blockHash: msg.getBlockHash_asB64(),
    blockTime: msg.getBlockTime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventData}
 */
proto.EventData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventData;
  return proto.EventData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventData}
 */
proto.EventData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getTopicsList().push(value);
      msg.setTopicsList(msg.getTopicsList());
      break;
    case 2:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setCaller(value);
      break;
    case 3:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncodedBody(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOriginalRequest(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxHash(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactionIndex(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EventData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EventData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EventData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getCaller();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = this.getAddress();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = this.getPluginName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = this.getEncodedBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = this.getOriginalRequest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = this.getTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = this.getTransactionIndex();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = this.getBlockTime();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EventData} The clone.
 */
proto.EventData.prototype.cloneMessage = function() {
  return /** @type {!proto.EventData} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string topics = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.EventData.prototype.getTopicsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.EventData.prototype.setTopicsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.EventData.prototype.clearTopicsList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * optional Address caller = 2;
 * @return {proto.Address}
 */
proto.EventData.prototype.getCaller = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 2));
};


/** @param {proto.Address|undefined} value  */
proto.EventData.prototype.setCaller = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.EventData.prototype.clearCaller = function() {
  this.setCaller(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventData.prototype.hasCaller = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Address address = 3;
 * @return {proto.Address}
 */
proto.EventData.prototype.getAddress = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 3));
};


/** @param {proto.Address|undefined} value  */
proto.EventData.prototype.setAddress = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.EventData.prototype.clearAddress = function() {
  this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventData.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string plugin_name = 4;
 * @return {string}
 */
proto.EventData.prototype.getPluginName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.EventData.prototype.setPluginName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 block_height = 5;
 * @return {number}
 */
proto.EventData.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.EventData.prototype.setBlockHeight = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes encoded_body = 6;
 * @return {!(string|Uint8Array)}
 */
proto.EventData.prototype.getEncodedBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes encoded_body = 6;
 * This is a type-conversion wrapper around `getEncodedBody()`
 * @return {string}
 */
proto.EventData.prototype.getEncodedBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncodedBody()));
};


/**
 * optional bytes encoded_body = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncodedBody()`
 * @return {!Uint8Array}
 */
proto.EventData.prototype.getEncodedBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncodedBody()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EventData.prototype.setEncodedBody = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes original_request = 7;
 * @return {!(string|Uint8Array)}
 */
proto.EventData.prototype.getOriginalRequest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/**
 * optional bytes original_request = 7;
 * This is a type-conversion wrapper around `getOriginalRequest()`
 * @return {string}
 */
proto.EventData.prototype.getOriginalRequest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOriginalRequest()));
};


/**
 * optional bytes original_request = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOriginalRequest()`
 * @return {!Uint8Array}
 */
proto.EventData.prototype.getOriginalRequest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOriginalRequest()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EventData.prototype.setOriginalRequest = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bytes tx_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.EventData.prototype.getTxHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/**
 * optional bytes tx_hash = 8;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.EventData.prototype.getTxHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxHash()));
};


/**
 * optional bytes tx_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.EventData.prototype.getTxHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EventData.prototype.setTxHash = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint64 transaction_index = 9;
 * @return {number}
 */
proto.EventData.prototype.getTransactionIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.EventData.prototype.setTransactionIndex = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bytes block_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.EventData.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/**
 * optional bytes block_hash = 10;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.EventData.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.EventData.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EventData.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int64 block_time = 11;
 * @return {number}
 */
proto.EventData.prototype.getBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.EventData.prototype.setBlockTime = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TxReceiptList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TxReceiptList.repeatedFields_, null);
};
goog.inherits(proto.TxReceiptList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TxReceiptList.displayName = 'proto.TxReceiptList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TxReceiptList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TxReceiptList.prototype.toObject = function(opt_includeInstance) {
  return proto.TxReceiptList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TxReceiptList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TxReceiptList.toObject = function(includeInstance, msg) {
  var f, obj = {
    txReceiptsList: jspb.Message.toObjectList(msg.getTxReceiptsList(),
    proto.EvmTxReceipt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TxReceiptList}
 */
proto.TxReceiptList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TxReceiptList;
  return proto.TxReceiptList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TxReceiptList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TxReceiptList}
 */
proto.TxReceiptList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EvmTxReceipt;
      reader.readMessage(value,proto.EvmTxReceipt.deserializeBinaryFromReader);
      msg.getTxReceiptsList().push(value);
      msg.setTxReceiptsList(msg.getTxReceiptsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.TxReceiptList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TxReceiptList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TxReceiptList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.TxReceiptList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTxReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.EvmTxReceipt.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.TxReceiptList} The clone.
 */
proto.TxReceiptList.prototype.cloneMessage = function() {
  return /** @type {!proto.TxReceiptList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated EvmTxReceipt tx_receipts = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.EvmTxReceipt>}
 */
proto.TxReceiptList.prototype.getTxReceiptsList = function() {
  return /** @type{!Array.<!proto.EvmTxReceipt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EvmTxReceipt, 1));
};


/** @param {Array.<!proto.EvmTxReceipt>} value  */
proto.TxReceiptList.prototype.setTxReceiptsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.TxReceiptList.prototype.clearTxReceiptsList = function() {
  this.setTxReceiptsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EvmTxReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EvmTxReceipt.repeatedFields_, null);
};
goog.inherits(proto.EvmTxReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EvmTxReceipt.displayName = 'proto.EvmTxReceipt';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EvmTxReceipt.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EvmTxReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.EvmTxReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EvmTxReceipt} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EvmTxReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionIndex: msg.getTransactionIndex(),
    blockHash: msg.getBlockHash_asB64(),
    blockNumber: msg.getBlockNumber(),
    cumulativeGasUsed: msg.getCumulativeGasUsed(),
    gasUsed: msg.getGasUsed(),
    contractAddress: msg.getContractAddress_asB64(),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.EventData.toObject, includeInstance),
    logsBloom: msg.getLogsBloom_asB64(),
    status: msg.getStatus(),
    txHash: msg.getTxHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EvmTxReceipt}
 */
proto.EvmTxReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EvmTxReceipt;
  return proto.EvmTxReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EvmTxReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EvmTxReceipt}
 */
proto.EvmTxReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransactionIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCumulativeGasUsed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGasUsed(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractAddress(value);
      break;
    case 7:
      var value = new proto.EventData;
      reader.readMessage(value,proto.EventData.deserializeBinaryFromReader);
      msg.getLogsList().push(value);
      msg.setLogsList(msg.getLogsList());
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogsBloom(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EvmTxReceipt} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EvmTxReceipt.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EvmTxReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EvmTxReceipt.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTransactionIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getBlockNumber();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getCumulativeGasUsed();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getGasUsed();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = this.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.EventData.serializeBinaryToWriter
    );
  }
  f = this.getLogsBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = this.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = this.getTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EvmTxReceipt} The clone.
 */
proto.EvmTxReceipt.prototype.cloneMessage = function() {
  return /** @type {!proto.EvmTxReceipt} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 transaction_index = 1;
 * @return {number}
 */
proto.EvmTxReceipt.prototype.getTransactionIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.EvmTxReceipt.prototype.setTransactionIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EvmTxReceipt.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes block_hash = 2;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.EvmTxReceipt.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.EvmTxReceipt.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EvmTxReceipt.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 block_number = 3;
 * @return {number}
 */
proto.EvmTxReceipt.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.EvmTxReceipt.prototype.setBlockNumber = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 cumulative_gas_used = 4;
 * @return {number}
 */
proto.EvmTxReceipt.prototype.getCumulativeGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.EvmTxReceipt.prototype.setCumulativeGasUsed = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 gas_used = 5;
 * @return {number}
 */
proto.EvmTxReceipt.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.EvmTxReceipt.prototype.setGasUsed = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes contract_address = 6;
 * @return {!(string|Uint8Array)}
 */
proto.EvmTxReceipt.prototype.getContractAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes contract_address = 6;
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {string}
 */
proto.EvmTxReceipt.prototype.getContractAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractAddress()));
};


/**
 * optional bytes contract_address = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {!Uint8Array}
 */
proto.EvmTxReceipt.prototype.getContractAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractAddress()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EvmTxReceipt.prototype.setContractAddress = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated EventData logs = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.EventData>}
 */
proto.EvmTxReceipt.prototype.getLogsList = function() {
  return /** @type{!Array.<!proto.EventData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EventData, 7));
};


/** @param {Array.<!proto.EventData>} value  */
proto.EvmTxReceipt.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


proto.EvmTxReceipt.prototype.clearLogsList = function() {
  this.setLogsList([]);
};


/**
 * optional bytes logs_bloom = 8;
 * @return {!(string|Uint8Array)}
 */
proto.EvmTxReceipt.prototype.getLogsBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/**
 * optional bytes logs_bloom = 8;
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {string}
 */
proto.EvmTxReceipt.prototype.getLogsBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogsBloom()));
};


/**
 * optional bytes logs_bloom = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {!Uint8Array}
 */
proto.EvmTxReceipt.prototype.getLogsBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogsBloom()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EvmTxReceipt.prototype.setLogsBloom = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 status = 9;
 * @return {number}
 */
proto.EvmTxReceipt.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.EvmTxReceipt.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bytes tx_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.EvmTxReceipt.prototype.getTxHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/**
 * optional bytes tx_hash = 10;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.EvmTxReceipt.prototype.getTxHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxHash()));
};


/**
 * optional bytes tx_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.EvmTxReceipt.prototype.getTxHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EvmTxReceipt.prototype.setTxHash = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EvmTxObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EvmTxObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EvmTxObject.displayName = 'proto.EvmTxObject';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EvmTxObject.prototype.toObject = function(opt_includeInstance) {
  return proto.EvmTxObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EvmTxObject} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EvmTxObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    nonce: msg.getNonce(),
    blockHash: msg.getBlockHash_asB64(),
    blockNumber: msg.getBlockNumber(),
    transactionIndex: msg.getTransactionIndex(),
    from: msg.getFrom_asB64(),
    to: msg.getTo_asB64(),
    value: msg.getValue(),
    gasPrice: msg.getGasPrice(),
    gas: msg.getGas(),
    input: msg.getInput_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EvmTxObject}
 */
proto.EvmTxObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EvmTxObject;
  return proto.EvmTxObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EvmTxObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EvmTxObject}
 */
proto.EvmTxObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockNumber(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransactionIndex(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGasPrice(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGas(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EvmTxObject} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EvmTxObject.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EvmTxObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EvmTxObject.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getBlockNumber();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getTransactionIndex();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = this.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = this.getValue();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = this.getGasPrice();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = this.getGas();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = this.getInput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EvmTxObject} The clone.
 */
proto.EvmTxObject.prototype.cloneMessage = function() {
  return /** @type {!proto.EvmTxObject} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.EvmTxObject.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.EvmTxObject.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.EvmTxObject.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EvmTxObject.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.EvmTxObject.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.EvmTxObject.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.EvmTxObject.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes block_hash = 3;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.EvmTxObject.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.EvmTxObject.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EvmTxObject.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 block_number = 4;
 * @return {number}
 */
proto.EvmTxObject.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.EvmTxObject.prototype.setBlockNumber = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 transaction_index = 5;
 * @return {number}
 */
proto.EvmTxObject.prototype.getTransactionIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.EvmTxObject.prototype.setTransactionIndex = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes from = 6;
 * @return {!(string|Uint8Array)}
 */
proto.EvmTxObject.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes from = 6;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.EvmTxObject.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.EvmTxObject.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EvmTxObject.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes to = 7;
 * @return {!(string|Uint8Array)}
 */
proto.EvmTxObject.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/**
 * optional bytes to = 7;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.EvmTxObject.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.EvmTxObject.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EvmTxObject.prototype.setTo = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 value = 8;
 * @return {number}
 */
proto.EvmTxObject.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.EvmTxObject.prototype.setValue = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 gas_price = 9;
 * @return {number}
 */
proto.EvmTxObject.prototype.getGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.EvmTxObject.prototype.setGasPrice = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional int64 gas = 10;
 * @return {number}
 */
proto.EvmTxObject.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.EvmTxObject.prototype.setGas = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bytes input = 11;
 * @return {!(string|Uint8Array)}
 */
proto.EvmTxObject.prototype.getInput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/**
 * optional bytes input = 11;
 * This is a type-conversion wrapper around `getInput()`
 * @return {string}
 */
proto.EvmTxObject.prototype.getInput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInput()));
};


/**
 * optional bytes input = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInput()`
 * @return {!Uint8Array}
 */
proto.EvmTxObject.prototype.getInput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInput()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EvmTxObject.prototype.setInput = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.EthBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthBlockInfo.displayName = 'proto.EthBlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthBlockInfo.repeatedFields_ = [18,19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.EthBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EthBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: msg.getNumber(),
    hash: msg.getHash_asB64(),
    parentHash: msg.getParentHash_asB64(),
    nonce: msg.getNonce_asB64(),
    sha3Uncles: msg.getSha3Uncles_asB64(),
    logsBloom: msg.getLogsBloom_asB64(),
    transactionsRoot: msg.getTransactionsRoot_asB64(),
    stateRoot: msg.getStateRoot_asB64(),
    receiptsRoot: msg.getReceiptsRoot_asB64(),
    miner: msg.getMiner_asB64(),
    difficulty: msg.getDifficulty(),
    totalDifficulty: msg.getTotalDifficulty(),
    extraData: msg.getExtraData_asB64(),
    size: msg.getSize(),
    gaslimit: msg.getGaslimit(),
    gasused: msg.getGasused(),
    timestamp: msg.getTimestamp(),
    transactionsList: msg.getTransactionsList_asB64(),
    unclesList: msg.getUnclesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthBlockInfo}
 */
proto.EthBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthBlockInfo;
  return proto.EthBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthBlockInfo}
 */
proto.EthBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSha3Uncles(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogsBloom(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionsRoot(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateRoot(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiptsRoot(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMiner(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDifficulty(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalDifficulty(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtraData(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGaslimit(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGasused(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 18:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getTransactionsList().push(value);
      msg.setTransactionsList(msg.getTransactionsList());
      break;
    case 19:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getUnclesList().push(value);
      msg.setUnclesList(msg.getUnclesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EthBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthBlockInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthBlockInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNumber();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getParentHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getSha3Uncles_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getLogsBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = this.getTransactionsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = this.getStateRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = this.getReceiptsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = this.getMiner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = this.getDifficulty();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = this.getTotalDifficulty();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = this.getExtraData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = this.getSize();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = this.getGaslimit();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = this.getGasused();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = this.getTransactionsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      18,
      f
    );
  }
  f = this.getUnclesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      19,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EthBlockInfo} The clone.
 */
proto.EthBlockInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.EthBlockInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 number = 1;
 * @return {number}
 */
proto.EthBlockInfo.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.EthBlockInfo.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EthBlockInfo.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.EthBlockInfo.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthBlockInfo.prototype.setHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes parent_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.EthBlockInfo.prototype.getParentHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes parent_hash = 3;
 * This is a type-conversion wrapper around `getParentHash()`
 * @return {string}
 */
proto.EthBlockInfo.prototype.getParentHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentHash()));
};


/**
 * optional bytes parent_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentHash()`
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.getParentHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthBlockInfo.prototype.setParentHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes nonce = 4;
 * @return {!(string|Uint8Array)}
 */
proto.EthBlockInfo.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes nonce = 4;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.EthBlockInfo.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthBlockInfo.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes sha3_uncles = 5;
 * @return {!(string|Uint8Array)}
 */
proto.EthBlockInfo.prototype.getSha3Uncles = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes sha3_uncles = 5;
 * This is a type-conversion wrapper around `getSha3Uncles()`
 * @return {string}
 */
proto.EthBlockInfo.prototype.getSha3Uncles_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSha3Uncles()));
};


/**
 * optional bytes sha3_uncles = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSha3Uncles()`
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.getSha3Uncles_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSha3Uncles()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthBlockInfo.prototype.setSha3Uncles = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes logs_bloom = 6;
 * @return {!(string|Uint8Array)}
 */
proto.EthBlockInfo.prototype.getLogsBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes logs_bloom = 6;
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {string}
 */
proto.EthBlockInfo.prototype.getLogsBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogsBloom()));
};


/**
 * optional bytes logs_bloom = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.getLogsBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogsBloom()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthBlockInfo.prototype.setLogsBloom = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes transactions_root = 7;
 * @return {!(string|Uint8Array)}
 */
proto.EthBlockInfo.prototype.getTransactionsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/**
 * optional bytes transactions_root = 7;
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {string}
 */
proto.EthBlockInfo.prototype.getTransactionsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionsRoot()));
};


/**
 * optional bytes transactions_root = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.getTransactionsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionsRoot()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthBlockInfo.prototype.setTransactionsRoot = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bytes state_root = 8;
 * @return {!(string|Uint8Array)}
 */
proto.EthBlockInfo.prototype.getStateRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/**
 * optional bytes state_root = 8;
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {string}
 */
proto.EthBlockInfo.prototype.getStateRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateRoot()));
};


/**
 * optional bytes state_root = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.getStateRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateRoot()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthBlockInfo.prototype.setStateRoot = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bytes receipts_root = 9;
 * @return {!(string|Uint8Array)}
 */
proto.EthBlockInfo.prototype.getReceiptsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/**
 * optional bytes receipts_root = 9;
 * This is a type-conversion wrapper around `getReceiptsRoot()`
 * @return {string}
 */
proto.EthBlockInfo.prototype.getReceiptsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiptsRoot()));
};


/**
 * optional bytes receipts_root = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiptsRoot()`
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.getReceiptsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiptsRoot()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthBlockInfo.prototype.setReceiptsRoot = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bytes miner = 10;
 * @return {!(string|Uint8Array)}
 */
proto.EthBlockInfo.prototype.getMiner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/**
 * optional bytes miner = 10;
 * This is a type-conversion wrapper around `getMiner()`
 * @return {string}
 */
proto.EthBlockInfo.prototype.getMiner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMiner()));
};


/**
 * optional bytes miner = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMiner()`
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.getMiner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMiner()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthBlockInfo.prototype.setMiner = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int64 difficulty = 11;
 * @return {number}
 */
proto.EthBlockInfo.prototype.getDifficulty = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.EthBlockInfo.prototype.setDifficulty = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int64 total_difficulty = 12;
 * @return {number}
 */
proto.EthBlockInfo.prototype.getTotalDifficulty = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.EthBlockInfo.prototype.setTotalDifficulty = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bytes extra_data = 13;
 * @return {!(string|Uint8Array)}
 */
proto.EthBlockInfo.prototype.getExtraData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/**
 * optional bytes extra_data = 13;
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {string}
 */
proto.EthBlockInfo.prototype.getExtraData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtraData()));
};


/**
 * optional bytes extra_data = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {!Uint8Array}
 */
proto.EthBlockInfo.prototype.getExtraData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtraData()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthBlockInfo.prototype.setExtraData = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int64 size = 14;
 * @return {number}
 */
proto.EthBlockInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 14, 0));
};


/** @param {number} value  */
proto.EthBlockInfo.prototype.setSize = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional int64 gasLimit = 15;
 * @return {number}
 */
proto.EthBlockInfo.prototype.getGaslimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 15, 0));
};


/** @param {number} value  */
proto.EthBlockInfo.prototype.setGaslimit = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional int64 gasUsed = 16;
 * @return {number}
 */
proto.EthBlockInfo.prototype.getGasused = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 16, 0));
};


/** @param {number} value  */
proto.EthBlockInfo.prototype.setGasused = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional int64 timestamp = 17;
 * @return {number}
 */
proto.EthBlockInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 17, 0));
};


/** @param {number} value  */
proto.EthBlockInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * repeated bytes transactions = 18;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.EthBlockInfo.prototype.getTransactionsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 18));
};


/**
 * repeated bytes transactions = 18;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getTransactionsList()`
 * @return {!Array.<string>}
 */
proto.EthBlockInfo.prototype.getTransactionsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionsList()));
};


/**
 * repeated bytes transactions = 18;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.EthBlockInfo.prototype.getTransactionsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.EthBlockInfo.prototype.setTransactionsList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


proto.EthBlockInfo.prototype.clearTransactionsList = function() {
  jspb.Message.setField(this, 18, []);
};


/**
 * repeated bytes uncles = 19;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.EthBlockInfo.prototype.getUnclesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 19));
};


/**
 * repeated bytes uncles = 19;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getUnclesList()`
 * @return {!Array.<string>}
 */
proto.EthBlockInfo.prototype.getUnclesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getUnclesList()));
};


/**
 * repeated bytes uncles = 19;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnclesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.EthBlockInfo.prototype.getUnclesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getUnclesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.EthBlockInfo.prototype.setUnclesList = function(value) {
  jspb.Message.setField(this, 19, value || []);
};


proto.EthBlockInfo.prototype.clearUnclesList = function() {
  jspb.Message.setField(this, 19, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthFilterLogList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthFilterLogList.repeatedFields_, null);
};
goog.inherits(proto.EthFilterLogList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthFilterLogList.displayName = 'proto.EthFilterLogList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthFilterLogList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthFilterLogList.prototype.toObject = function(opt_includeInstance) {
  return proto.EthFilterLogList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthFilterLogList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EthFilterLogList.toObject = function(includeInstance, msg) {
  var f, obj = {
    ethBlockLogsList: jspb.Message.toObjectList(msg.getEthBlockLogsList(),
    proto.EthFilterLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthFilterLogList}
 */
proto.EthFilterLogList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthFilterLogList;
  return proto.EthFilterLogList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthFilterLogList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthFilterLogList}
 */
proto.EthFilterLogList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EthFilterLog;
      reader.readMessage(value,proto.EthFilterLog.deserializeBinaryFromReader);
      msg.getEthBlockLogsList().push(value);
      msg.setEthBlockLogsList(msg.getEthBlockLogsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EthFilterLogList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthFilterLogList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthFilterLogList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthFilterLogList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEthBlockLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.EthFilterLog.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EthFilterLogList} The clone.
 */
proto.EthFilterLogList.prototype.cloneMessage = function() {
  return /** @type {!proto.EthFilterLogList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated EthFilterLog eth_block_logs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.EthFilterLog>}
 */
proto.EthFilterLogList.prototype.getEthBlockLogsList = function() {
  return /** @type{!Array.<!proto.EthFilterLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EthFilterLog, 1));
};


/** @param {Array.<!proto.EthFilterLog>} value  */
proto.EthFilterLogList.prototype.setEthBlockLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.EthFilterLogList.prototype.clearEthBlockLogsList = function() {
  this.setEthBlockLogsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthFilterLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthFilterLog.repeatedFields_, null);
};
goog.inherits(proto.EthFilterLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthFilterLog.displayName = 'proto.EthFilterLog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthFilterLog.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthFilterLog.prototype.toObject = function(opt_includeInstance) {
  return proto.EthFilterLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthFilterLog} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EthFilterLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    removed: msg.getRemoved(),
    logIndex: msg.getLogIndex(),
    transactionIndex: msg.getTransactionIndex(),
    transactionHash: msg.getTransactionHash_asB64(),
    blockHash: msg.getBlockHash_asB64(),
    blockNumber: msg.getBlockNumber(),
    address: msg.getAddress_asB64(),
    data: msg.getData_asB64(),
    topicsList: msg.getTopicsList_asB64(),
    blockTime: msg.getBlockTime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthFilterLog}
 */
proto.EthFilterLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthFilterLog;
  return proto.EthFilterLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthFilterLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthFilterLog}
 */
proto.EthFilterLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoved(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLogIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransactionIndex(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockNumber(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getTopicsList().push(value);
      msg.setTopicsList(msg.getTopicsList());
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EthFilterLog} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthFilterLog.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthFilterLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EthFilterLog.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRemoved();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getLogIndex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getTransactionIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getTransactionHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getBlockNumber();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = this.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = this.getTopicsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      9,
      f
    );
  }
  f = this.getBlockTime();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EthFilterLog} The clone.
 */
proto.EthFilterLog.prototype.cloneMessage = function() {
  return /** @type {!proto.EthFilterLog} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool removed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.EthFilterLog.prototype.getRemoved = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.EthFilterLog.prototype.setRemoved = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 log_index = 2;
 * @return {number}
 */
proto.EthFilterLog.prototype.getLogIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.EthFilterLog.prototype.setLogIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 transaction_index = 3;
 * @return {number}
 */
proto.EthFilterLog.prototype.getTransactionIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.EthFilterLog.prototype.setTransactionIndex = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes transaction_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.EthFilterLog.prototype.getTransactionHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes transaction_hash = 4;
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {string}
 */
proto.EthFilterLog.prototype.getTransactionHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionHash()));
};


/**
 * optional bytes transaction_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {!Uint8Array}
 */
proto.EthFilterLog.prototype.getTransactionHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthFilterLog.prototype.setTransactionHash = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes block_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.EthFilterLog.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes block_hash = 5;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.EthFilterLog.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.EthFilterLog.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthFilterLog.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 block_number = 6;
 * @return {number}
 */
proto.EthFilterLog.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.EthFilterLog.prototype.setBlockNumber = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes address = 7;
 * @return {!(string|Uint8Array)}
 */
proto.EthFilterLog.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/**
 * optional bytes address = 7;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.EthFilterLog.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.EthFilterLog.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthFilterLog.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bytes data = 8;
 * @return {!(string|Uint8Array)}
 */
proto.EthFilterLog.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/**
 * optional bytes data = 8;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.EthFilterLog.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.EthFilterLog.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value  */
proto.EthFilterLog.prototype.setData = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * repeated bytes topics = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.EthFilterLog.prototype.getTopicsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 9));
};


/**
 * repeated bytes topics = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array.<string>}
 */
proto.EthFilterLog.prototype.getTopicsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getTopicsList()));
};


/**
 * repeated bytes topics = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.EthFilterLog.prototype.getTopicsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTopicsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.EthFilterLog.prototype.setTopicsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


proto.EthFilterLog.prototype.clearTopicsList = function() {
  jspb.Message.setField(this, 9, []);
};


/**
 * optional int64 block_time = 10;
 * @return {number}
 */
proto.EthFilterLog.prototype.getBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.EthFilterLog.prototype.setBlockTime = function(value) {
  jspb.Message.setField(this, 10, value);
};


goog.object.extend(exports, proto);
