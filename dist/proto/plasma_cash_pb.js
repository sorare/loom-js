/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_loom_pb = require('../proto/loom_pb.js');
goog.exportSymbol('proto.DepositRequest', null, global);
goog.exportSymbol('proto.GetBlockRequest', null, global);
goog.exportSymbol('proto.GetBlockResponse', null, global);
goog.exportSymbol('proto.GetCurrentBlockRequest', null, global);
goog.exportSymbol('proto.GetCurrentBlockResponse', null, global);
goog.exportSymbol('proto.GetPlasmaTxRequest', null, global);
goog.exportSymbol('proto.GetPlasmaTxResponse', null, global);
goog.exportSymbol('proto.GetUserSlotsRequest', null, global);
goog.exportSymbol('proto.GetUserSlotsResponse', null, global);
goog.exportSymbol('proto.PlasmaBlock', null, global);
goog.exportSymbol('proto.PlasmaTx', null, global);
goog.exportSymbol('proto.PlasmaTxRequest', null, global);
goog.exportSymbol('proto.PlasmaTxResponse', null, global);
goog.exportSymbol('proto.SubmitBlockToMainnetRequest', null, global);
goog.exportSymbol('proto.SubmitBlockToMainnetResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlasmaBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlasmaBlock.repeatedFields_, null);
};
goog.inherits(proto.PlasmaBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlasmaBlock.displayName = 'proto.PlasmaBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlasmaBlock.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlasmaBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.PlasmaBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlasmaBlock} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PlasmaBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: (f = msg.getUid()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.PlasmaTx.toObject, includeInstance),
    signature: msg.getSignature_asB64(),
    merkleHash: msg.getMerkleHash_asB64(),
    hash: msg.getHash_asB64(),
    proof: msg.getProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlasmaBlock}
 */
proto.PlasmaBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlasmaBlock;
  return proto.PlasmaBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlasmaBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlasmaBlock}
 */
proto.PlasmaBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.PlasmaTx;
      reader.readMessage(value,proto.PlasmaTx.deserializeBinaryFromReader);
      msg.getTransactionsList().push(value);
      msg.setTransactionsList(msg.getTransactionsList());
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMerkleHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.PlasmaBlock} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PlasmaBlock.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlasmaBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.PlasmaBlock.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = this.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PlasmaTx.serializeBinaryToWriter
    );
  }
  f = this.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.PlasmaBlock} The clone.
 */
proto.PlasmaBlock.prototype.cloneMessage = function() {
  return /** @type {!proto.PlasmaBlock} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional BigUInt uid = 1;
 * @return {proto.BigUInt}
 */
proto.PlasmaBlock.prototype.getUid = function() {
  return /** @type{proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 1));
};


/** @param {proto.BigUInt|undefined} value  */
proto.PlasmaBlock.prototype.setUid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PlasmaBlock.prototype.clearUid = function() {
  this.setUid(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.PlasmaBlock.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PlasmaTx transactions = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.PlasmaTx>}
 */
proto.PlasmaBlock.prototype.getTransactionsList = function() {
  return /** @type{!Array.<!proto.PlasmaTx>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlasmaTx, 2));
};


/** @param {Array.<!proto.PlasmaTx>} value  */
proto.PlasmaBlock.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.PlasmaBlock.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.PlasmaBlock.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.PlasmaBlock.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.PlasmaBlock.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlasmaBlock.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes merkle_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.PlasmaBlock.prototype.getMerkleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes merkle_hash = 4;
 * This is a type-conversion wrapper around `getMerkleHash()`
 * @return {string}
 */
proto.PlasmaBlock.prototype.getMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMerkleHash()));
};


/**
 * optional bytes merkle_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerkleHash()`
 * @return {!Uint8Array}
 */
proto.PlasmaBlock.prototype.getMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMerkleHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlasmaBlock.prototype.setMerkleHash = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.PlasmaBlock.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes hash = 5;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.PlasmaBlock.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.PlasmaBlock.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlasmaBlock.prototype.setHash = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes proof = 6;
 * @return {!(string|Uint8Array)}
 */
proto.PlasmaBlock.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes proof = 6;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.PlasmaBlock.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.PlasmaBlock.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlasmaBlock.prototype.setProof = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlasmaTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlasmaTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlasmaTx.displayName = 'proto.PlasmaTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlasmaTx.prototype.toObject = function(opt_includeInstance) {
  return proto.PlasmaTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlasmaTx} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PlasmaTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: msg.getSlot(),
    previousBlock: (f = msg.getPreviousBlock()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    denomination: (f = msg.getDenomination()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    newOwner: (f = msg.getNewOwner()) && proto_loom_pb.Address.toObject(includeInstance, f),
    signature: msg.getSignature_asB64(),
    hash: msg.getHash_asB64(),
    merkleHash: msg.getMerkleHash_asB64(),
    sender: (f = msg.getSender()) && proto_loom_pb.Address.toObject(includeInstance, f),
    proof: msg.getProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlasmaTx}
 */
proto.PlasmaTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlasmaTx;
  return proto.PlasmaTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlasmaTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlasmaTx}
 */
proto.PlasmaTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    case 2:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setPreviousBlock(value);
      break;
    case 3:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setDenomination(value);
      break;
    case 4:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setNewOwner(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMerkleHash(value);
      break;
    case 8:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.PlasmaTx} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PlasmaTx.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlasmaTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.PlasmaTx.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getPreviousBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = this.getDenomination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = this.getNewOwner();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = this.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = this.getMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = this.getSender();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = this.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.PlasmaTx} The clone.
 */
proto.PlasmaTx.prototype.cloneMessage = function() {
  return /** @type {!proto.PlasmaTx} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.PlasmaTx.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.PlasmaTx.prototype.setSlot = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional BigUInt previous_block = 2;
 * @return {proto.BigUInt}
 */
proto.PlasmaTx.prototype.getPreviousBlock = function() {
  return /** @type{proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 2));
};


/** @param {proto.BigUInt|undefined} value  */
proto.PlasmaTx.prototype.setPreviousBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.PlasmaTx.prototype.clearPreviousBlock = function() {
  this.setPreviousBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.PlasmaTx.prototype.hasPreviousBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BigUInt denomination = 3;
 * @return {proto.BigUInt}
 */
proto.PlasmaTx.prototype.getDenomination = function() {
  return /** @type{proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 3));
};


/** @param {proto.BigUInt|undefined} value  */
proto.PlasmaTx.prototype.setDenomination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.PlasmaTx.prototype.clearDenomination = function() {
  this.setDenomination(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.PlasmaTx.prototype.hasDenomination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Address new_owner = 4;
 * @return {proto.Address}
 */
proto.PlasmaTx.prototype.getNewOwner = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 4));
};


/** @param {proto.Address|undefined} value  */
proto.PlasmaTx.prototype.setNewOwner = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.PlasmaTx.prototype.clearNewOwner = function() {
  this.setNewOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.PlasmaTx.prototype.hasNewOwner = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.PlasmaTx.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes signature = 5;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.PlasmaTx.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.PlasmaTx.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlasmaTx.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.PlasmaTx.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes hash = 6;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.PlasmaTx.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.PlasmaTx.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlasmaTx.prototype.setHash = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes merkle_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.PlasmaTx.prototype.getMerkleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/**
 * optional bytes merkle_hash = 7;
 * This is a type-conversion wrapper around `getMerkleHash()`
 * @return {string}
 */
proto.PlasmaTx.prototype.getMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMerkleHash()));
};


/**
 * optional bytes merkle_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerkleHash()`
 * @return {!Uint8Array}
 */
proto.PlasmaTx.prototype.getMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMerkleHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlasmaTx.prototype.setMerkleHash = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional Address sender = 8;
 * @return {proto.Address}
 */
proto.PlasmaTx.prototype.getSender = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 8));
};


/** @param {proto.Address|undefined} value  */
proto.PlasmaTx.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.PlasmaTx.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.PlasmaTx.prototype.hasSender = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes proof = 9;
 * @return {!(string|Uint8Array)}
 */
proto.PlasmaTx.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/**
 * optional bytes proof = 9;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.PlasmaTx.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.PlasmaTx.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlasmaTx.prototype.setProof = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetCurrentBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetCurrentBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetCurrentBlockRequest.displayName = 'proto.GetCurrentBlockRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetCurrentBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetCurrentBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetCurrentBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetCurrentBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetCurrentBlockRequest}
 */
proto.GetCurrentBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetCurrentBlockRequest;
  return proto.GetCurrentBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetCurrentBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetCurrentBlockRequest}
 */
proto.GetCurrentBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetCurrentBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetCurrentBlockRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetCurrentBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetCurrentBlockRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetCurrentBlockRequest} The clone.
 */
proto.GetCurrentBlockRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.GetCurrentBlockRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetCurrentBlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetCurrentBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetCurrentBlockResponse.displayName = 'proto.GetCurrentBlockResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetCurrentBlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetCurrentBlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetCurrentBlockResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetCurrentBlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: (f = msg.getBlockHeight()) && proto_loom_pb.BigUInt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetCurrentBlockResponse}
 */
proto.GetCurrentBlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetCurrentBlockResponse;
  return proto.GetCurrentBlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetCurrentBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetCurrentBlockResponse}
 */
proto.GetCurrentBlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetCurrentBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetCurrentBlockResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetCurrentBlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetCurrentBlockResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlockHeight();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetCurrentBlockResponse} The clone.
 */
proto.GetCurrentBlockResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.GetCurrentBlockResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional BigUInt block_height = 1;
 * @return {proto.BigUInt}
 */
proto.GetCurrentBlockResponse.prototype.getBlockHeight = function() {
  return /** @type{proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 1));
};


/** @param {proto.BigUInt|undefined} value  */
proto.GetCurrentBlockResponse.prototype.setBlockHeight = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetCurrentBlockResponse.prototype.clearBlockHeight = function() {
  this.setBlockHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.GetCurrentBlockResponse.prototype.hasBlockHeight = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetBlockRequest.displayName = 'proto.GetBlockRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: (f = msg.getBlockHeight()) && proto_loom_pb.BigUInt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetBlockRequest}
 */
proto.GetBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetBlockRequest;
  return proto.GetBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetBlockRequest}
 */
proto.GetBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetBlockRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetBlockRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlockHeight();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetBlockRequest} The clone.
 */
proto.GetBlockRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.GetBlockRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional BigUInt block_height = 1;
 * @return {proto.BigUInt}
 */
proto.GetBlockRequest.prototype.getBlockHeight = function() {
  return /** @type{proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 1));
};


/** @param {proto.BigUInt|undefined} value  */
proto.GetBlockRequest.prototype.setBlockHeight = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetBlockRequest.prototype.clearBlockHeight = function() {
  this.setBlockHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.GetBlockRequest.prototype.hasBlockHeight = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetBlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetBlockResponse.displayName = 'proto.GetBlockResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetBlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetBlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetBlockResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetBlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && proto.PlasmaBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetBlockResponse}
 */
proto.GetBlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetBlockResponse;
  return proto.GetBlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetBlockResponse}
 */
proto.GetBlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlasmaBlock;
      reader.readMessage(value,proto.PlasmaBlock.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetBlockResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetBlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetBlockResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PlasmaBlock.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetBlockResponse} The clone.
 */
proto.GetBlockResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.GetBlockResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional PlasmaBlock block = 1;
 * @return {proto.PlasmaBlock}
 */
proto.GetBlockResponse.prototype.getBlock = function() {
  return /** @type{proto.PlasmaBlock} */ (
    jspb.Message.getWrapperField(this, proto.PlasmaBlock, 1));
};


/** @param {proto.PlasmaBlock|undefined} value  */
proto.GetBlockResponse.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetBlockResponse.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.GetBlockResponse.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubmitBlockToMainnetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubmitBlockToMainnetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubmitBlockToMainnetRequest.displayName = 'proto.SubmitBlockToMainnetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubmitBlockToMainnetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SubmitBlockToMainnetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubmitBlockToMainnetRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SubmitBlockToMainnetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubmitBlockToMainnetRequest}
 */
proto.SubmitBlockToMainnetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubmitBlockToMainnetRequest;
  return proto.SubmitBlockToMainnetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubmitBlockToMainnetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubmitBlockToMainnetRequest}
 */
proto.SubmitBlockToMainnetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SubmitBlockToMainnetRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SubmitBlockToMainnetRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubmitBlockToMainnetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SubmitBlockToMainnetRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SubmitBlockToMainnetRequest} The clone.
 */
proto.SubmitBlockToMainnetRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.SubmitBlockToMainnetRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubmitBlockToMainnetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubmitBlockToMainnetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubmitBlockToMainnetResponse.displayName = 'proto.SubmitBlockToMainnetResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubmitBlockToMainnetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SubmitBlockToMainnetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubmitBlockToMainnetResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SubmitBlockToMainnetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    merkleHash: msg.getMerkleHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubmitBlockToMainnetResponse}
 */
proto.SubmitBlockToMainnetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubmitBlockToMainnetResponse;
  return proto.SubmitBlockToMainnetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubmitBlockToMainnetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubmitBlockToMainnetResponse}
 */
proto.SubmitBlockToMainnetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMerkleHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SubmitBlockToMainnetResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SubmitBlockToMainnetResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubmitBlockToMainnetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SubmitBlockToMainnetResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SubmitBlockToMainnetResponse} The clone.
 */
proto.SubmitBlockToMainnetResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.SubmitBlockToMainnetResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes merkle_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.SubmitBlockToMainnetResponse.prototype.getMerkleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes merkle_hash = 1;
 * This is a type-conversion wrapper around `getMerkleHash()`
 * @return {string}
 */
proto.SubmitBlockToMainnetResponse.prototype.getMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMerkleHash()));
};


/**
 * optional bytes merkle_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerkleHash()`
 * @return {!Uint8Array}
 */
proto.SubmitBlockToMainnetResponse.prototype.getMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMerkleHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.SubmitBlockToMainnetResponse.prototype.setMerkleHash = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlasmaTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlasmaTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlasmaTxRequest.displayName = 'proto.PlasmaTxRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlasmaTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PlasmaTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlasmaTxRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PlasmaTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    plasmatx: (f = msg.getPlasmatx()) && proto.PlasmaTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlasmaTxRequest}
 */
proto.PlasmaTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlasmaTxRequest;
  return proto.PlasmaTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlasmaTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlasmaTxRequest}
 */
proto.PlasmaTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlasmaTx;
      reader.readMessage(value,proto.PlasmaTx.deserializeBinaryFromReader);
      msg.setPlasmatx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.PlasmaTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PlasmaTxRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlasmaTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.PlasmaTxRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlasmatx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PlasmaTx.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.PlasmaTxRequest} The clone.
 */
proto.PlasmaTxRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.PlasmaTxRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional PlasmaTx plasmatx = 1;
 * @return {proto.PlasmaTx}
 */
proto.PlasmaTxRequest.prototype.getPlasmatx = function() {
  return /** @type{proto.PlasmaTx} */ (
    jspb.Message.getWrapperField(this, proto.PlasmaTx, 1));
};


/** @param {proto.PlasmaTx|undefined} value  */
proto.PlasmaTxRequest.prototype.setPlasmatx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PlasmaTxRequest.prototype.clearPlasmatx = function() {
  this.setPlasmatx(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.PlasmaTxRequest.prototype.hasPlasmatx = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlasmaTxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlasmaTxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlasmaTxResponse.displayName = 'proto.PlasmaTxResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlasmaTxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PlasmaTxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlasmaTxResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PlasmaTxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlasmaTxResponse}
 */
proto.PlasmaTxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlasmaTxResponse;
  return proto.PlasmaTxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlasmaTxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlasmaTxResponse}
 */
proto.PlasmaTxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.PlasmaTxResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PlasmaTxResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlasmaTxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.PlasmaTxResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.PlasmaTxResponse} The clone.
 */
proto.PlasmaTxResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.PlasmaTxResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetPlasmaTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetPlasmaTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetPlasmaTxRequest.displayName = 'proto.GetPlasmaTxRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetPlasmaTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetPlasmaTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetPlasmaTxRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetPlasmaTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: msg.getSlot(),
    blockHeight: (f = msg.getBlockHeight()) && proto_loom_pb.BigUInt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetPlasmaTxRequest}
 */
proto.GetPlasmaTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetPlasmaTxRequest;
  return proto.GetPlasmaTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetPlasmaTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetPlasmaTxRequest}
 */
proto.GetPlasmaTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    case 2:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetPlasmaTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetPlasmaTxRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetPlasmaTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetPlasmaTxRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getBlockHeight();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetPlasmaTxRequest} The clone.
 */
proto.GetPlasmaTxRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.GetPlasmaTxRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.GetPlasmaTxRequest.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.GetPlasmaTxRequest.prototype.setSlot = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional BigUInt block_height = 2;
 * @return {proto.BigUInt}
 */
proto.GetPlasmaTxRequest.prototype.getBlockHeight = function() {
  return /** @type{proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 2));
};


/** @param {proto.BigUInt|undefined} value  */
proto.GetPlasmaTxRequest.prototype.setBlockHeight = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GetPlasmaTxRequest.prototype.clearBlockHeight = function() {
  this.setBlockHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.GetPlasmaTxRequest.prototype.hasBlockHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetPlasmaTxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetPlasmaTxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetPlasmaTxResponse.displayName = 'proto.GetPlasmaTxResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetPlasmaTxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetPlasmaTxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetPlasmaTxResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetPlasmaTxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    plasmaTx: (f = msg.getPlasmaTx()) && proto.PlasmaTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetPlasmaTxResponse}
 */
proto.GetPlasmaTxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetPlasmaTxResponse;
  return proto.GetPlasmaTxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetPlasmaTxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetPlasmaTxResponse}
 */
proto.GetPlasmaTxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlasmaTx;
      reader.readMessage(value,proto.PlasmaTx.deserializeBinaryFromReader);
      msg.setPlasmaTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetPlasmaTxResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetPlasmaTxResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetPlasmaTxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetPlasmaTxResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlasmaTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PlasmaTx.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetPlasmaTxResponse} The clone.
 */
proto.GetPlasmaTxResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.GetPlasmaTxResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional PlasmaTx plasma_tx = 1;
 * @return {proto.PlasmaTx}
 */
proto.GetPlasmaTxResponse.prototype.getPlasmaTx = function() {
  return /** @type{proto.PlasmaTx} */ (
    jspb.Message.getWrapperField(this, proto.PlasmaTx, 1));
};


/** @param {proto.PlasmaTx|undefined} value  */
proto.GetPlasmaTxResponse.prototype.setPlasmaTx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetPlasmaTxResponse.prototype.clearPlasmaTx = function() {
  this.setPlasmaTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.GetPlasmaTxResponse.prototype.hasPlasmaTx = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetUserSlotsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetUserSlotsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetUserSlotsRequest.displayName = 'proto.GetUserSlotsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetUserSlotsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetUserSlotsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetUserSlotsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetUserSlotsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetUserSlotsRequest}
 */
proto.GetUserSlotsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetUserSlotsRequest;
  return proto.GetUserSlotsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetUserSlotsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetUserSlotsRequest}
 */
proto.GetUserSlotsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetUserSlotsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetUserSlotsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetUserSlotsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetUserSlotsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetUserSlotsRequest} The clone.
 */
proto.GetUserSlotsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.GetUserSlotsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Address from = 1;
 * @return {proto.Address}
 */
proto.GetUserSlotsRequest.prototype.getFrom = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {proto.Address|undefined} value  */
proto.GetUserSlotsRequest.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetUserSlotsRequest.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.GetUserSlotsRequest.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetUserSlotsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetUserSlotsResponse.repeatedFields_, null);
};
goog.inherits(proto.GetUserSlotsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetUserSlotsResponse.displayName = 'proto.GetUserSlotsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetUserSlotsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetUserSlotsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetUserSlotsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetUserSlotsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetUserSlotsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    slotsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetUserSlotsResponse}
 */
proto.GetUserSlotsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetUserSlotsResponse;
  return proto.GetUserSlotsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetUserSlotsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetUserSlotsResponse}
 */
proto.GetUserSlotsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint64());
      msg.setSlotsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetUserSlotsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetUserSlotsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetUserSlotsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetUserSlotsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSlotsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetUserSlotsResponse} The clone.
 */
proto.GetUserSlotsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.GetUserSlotsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated uint64 slots = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.GetUserSlotsResponse.prototype.getSlotsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<number>} value  */
proto.GetUserSlotsResponse.prototype.setSlotsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.GetUserSlotsResponse.prototype.clearSlotsList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DepositRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DepositRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DepositRequest.displayName = 'proto.DepositRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DepositRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DepositRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DepositRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DepositRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: msg.getSlot(),
    depositBlock: (f = msg.getDepositBlock()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    denomination: (f = msg.getDenomination()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto_loom_pb.Address.toObject(includeInstance, f),
    contract: (f = msg.getContract()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DepositRequest}
 */
proto.DepositRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DepositRequest;
  return proto.DepositRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DepositRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DepositRequest}
 */
proto.DepositRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    case 2:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setDepositBlock(value);
      break;
    case 3:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setDenomination(value);
      break;
    case 4:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 5:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DepositRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DepositRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DepositRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DepositRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getDepositBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = this.getDenomination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = this.getFrom();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = this.getContract();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DepositRequest} The clone.
 */
proto.DepositRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.DepositRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.DepositRequest.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.DepositRequest.prototype.setSlot = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional BigUInt deposit_block = 2;
 * @return {proto.BigUInt}
 */
proto.DepositRequest.prototype.getDepositBlock = function() {
  return /** @type{proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 2));
};


/** @param {proto.BigUInt|undefined} value  */
proto.DepositRequest.prototype.setDepositBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DepositRequest.prototype.clearDepositBlock = function() {
  this.setDepositBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DepositRequest.prototype.hasDepositBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BigUInt denomination = 3;
 * @return {proto.BigUInt}
 */
proto.DepositRequest.prototype.getDenomination = function() {
  return /** @type{proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 3));
};


/** @param {proto.BigUInt|undefined} value  */
proto.DepositRequest.prototype.setDenomination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.DepositRequest.prototype.clearDenomination = function() {
  this.setDenomination(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DepositRequest.prototype.hasDenomination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Address from = 4;
 * @return {proto.Address}
 */
proto.DepositRequest.prototype.getFrom = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 4));
};


/** @param {proto.Address|undefined} value  */
proto.DepositRequest.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.DepositRequest.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DepositRequest.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Address contract = 5;
 * @return {proto.Address}
 */
proto.DepositRequest.prototype.getContract = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 5));
};


/** @param {proto.Address|undefined} value  */
proto.DepositRequest.prototype.setContract = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.DepositRequest.prototype.clearContract = function() {
  this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DepositRequest.prototype.hasContract = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto);
