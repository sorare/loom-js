/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_loom_pb = require('../proto/loom_pb.js');
goog.exportSymbol('proto.DeployerContract', null, global);
goog.exportSymbol('proto.GetDeployedContractsRequest', null, global);
goog.exportSymbol('proto.GetDeployedContractsResponse', null, global);
goog.exportSymbol('proto.GetTierInfoRequest', null, global);
goog.exportSymbol('proto.GetTierInfoResponse', null, global);
goog.exportSymbol('proto.GetUserDeployersRequest', null, global);
goog.exportSymbol('proto.GetUserDeployersResponse', null, global);
goog.exportSymbol('proto.InitRequest', null, global);
goog.exportSymbol('proto.RemoveUserDeployerRequest', null, global);
goog.exportSymbol('proto.SetTierInfoRequest', null, global);
goog.exportSymbol('proto.Tier', null, global);
goog.exportSymbol('proto.TierID', null, global);
goog.exportSymbol('proto.TierInfo', null, global);
goog.exportSymbol('proto.UserDeployerState', null, global);
goog.exportSymbol('proto.UserState', null, global);
goog.exportSymbol('proto.WhitelistUserDeployerRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Tier.displayName = 'proto.Tier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tier.prototype.toObject = function(opt_includeInstance) {
  return proto.Tier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Tier.toObject = function(includeInstance, msg) {
  var f, obj = {
    tierId: msg.getTierId(),
    fee: (f = msg.getFee()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tier}
 */
proto.Tier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tier;
  return proto.Tier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tier}
 */
proto.Tier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TierID} */ (reader.readEnum());
      msg.setTierId(value);
      break;
    case 2:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Tier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Tier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Tier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTierId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Tier} The clone.
 */
proto.Tier.prototype.cloneMessage = function() {
  return /** @type {!proto.Tier} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional TierID tier_id = 1;
 * @return {!proto.TierID}
 */
proto.Tier.prototype.getTierId = function() {
  return /** @type {!proto.TierID} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.TierID} value  */
proto.Tier.prototype.setTierId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional BigUInt fee = 2;
 * @return {proto.BigUInt}
 */
proto.Tier.prototype.getFee = function() {
  return /** @type{proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 2));
};


/** @param {proto.BigUInt|undefined} value  */
proto.Tier.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Tier.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Tier.prototype.hasFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.Tier.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Tier.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TierInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TierInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TierInfo.displayName = 'proto.TierInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TierInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.TierInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TierInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TierInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tierId: msg.getTierId(),
    fee: msg.getFee(),
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TierInfo}
 */
proto.TierInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TierInfo;
  return proto.TierInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TierInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TierInfo}
 */
proto.TierInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TierID} */ (reader.readEnum());
      msg.setTierId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.TierInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TierInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TierInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.TierInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTierId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getFee();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.TierInfo} The clone.
 */
proto.TierInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.TierInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional TierID tier_id = 1;
 * @return {!proto.TierID}
 */
proto.TierInfo.prototype.getTierId = function() {
  return /** @type {!proto.TierID} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.TierID} value  */
proto.TierInfo.prototype.setTierId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 fee = 2;
 * @return {number}
 */
proto.TierInfo.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.TierInfo.prototype.setFee = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.TierInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.TierInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InitRequest.repeatedFields_, null);
};
goog.inherits(proto.InitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InitRequest.displayName = 'proto.InitRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InitRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.InitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InitRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.InitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && proto_loom_pb.Address.toObject(includeInstance, f),
    tierInfoList: jspb.Message.toObjectList(msg.getTierInfoList(),
    proto.TierInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InitRequest}
 */
proto.InitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InitRequest;
  return proto.InitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InitRequest}
 */
proto.InitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = new proto.TierInfo;
      reader.readMessage(value,proto.TierInfo.deserializeBinaryFromReader);
      msg.getTierInfoList().push(value);
      msg.setTierInfoList(msg.getTierInfoList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.InitRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.InitRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.InitRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = this.getTierInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TierInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.InitRequest} The clone.
 */
proto.InitRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.InitRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Address owner = 1;
 * @return {proto.Address}
 */
proto.InitRequest.prototype.getOwner = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {proto.Address|undefined} value  */
proto.InitRequest.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.InitRequest.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.InitRequest.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TierInfo tier_info = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.TierInfo>}
 */
proto.InitRequest.prototype.getTierInfoList = function() {
  return /** @type{!Array.<!proto.TierInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TierInfo, 2));
};


/** @param {Array.<!proto.TierInfo>} value  */
proto.InitRequest.prototype.setTierInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.InitRequest.prototype.clearTierInfoList = function() {
  this.setTierInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeployerContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeployerContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeployerContract.displayName = 'proto.DeployerContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeployerContract.prototype.toObject = function(opt_includeInstance) {
  return proto.DeployerContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeployerContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DeployerContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractAddress: (f = msg.getContractAddress()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeployerContract}
 */
proto.DeployerContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeployerContract;
  return proto.DeployerContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeployerContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeployerContract}
 */
proto.DeployerContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setContractAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DeployerContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DeployerContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeployerContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DeployerContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContractAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DeployerContract} The clone.
 */
proto.DeployerContract.prototype.cloneMessage = function() {
  return /** @type {!proto.DeployerContract} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Address contract_address = 1;
 * @return {proto.Address}
 */
proto.DeployerContract.prototype.getContractAddress = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {proto.Address|undefined} value  */
proto.DeployerContract.prototype.setContractAddress = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DeployerContract.prototype.clearContractAddress = function() {
  this.setContractAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DeployerContract.prototype.hasContractAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WhitelistUserDeployerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WhitelistUserDeployerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WhitelistUserDeployerRequest.displayName = 'proto.WhitelistUserDeployerRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WhitelistUserDeployerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WhitelistUserDeployerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WhitelistUserDeployerRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WhitelistUserDeployerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployerAddr: (f = msg.getDeployerAddr()) && proto_loom_pb.Address.toObject(includeInstance, f),
    tierId: msg.getTierId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WhitelistUserDeployerRequest}
 */
proto.WhitelistUserDeployerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WhitelistUserDeployerRequest;
  return proto.WhitelistUserDeployerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WhitelistUserDeployerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WhitelistUserDeployerRequest}
 */
proto.WhitelistUserDeployerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setDeployerAddr(value);
      break;
    case 2:
      var value = /** @type {!proto.TierID} */ (reader.readEnum());
      msg.setTierId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.WhitelistUserDeployerRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WhitelistUserDeployerRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WhitelistUserDeployerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.WhitelistUserDeployerRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeployerAddr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = this.getTierId();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.WhitelistUserDeployerRequest} The clone.
 */
proto.WhitelistUserDeployerRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.WhitelistUserDeployerRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Address deployer_addr = 1;
 * @return {proto.Address}
 */
proto.WhitelistUserDeployerRequest.prototype.getDeployerAddr = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {proto.Address|undefined} value  */
proto.WhitelistUserDeployerRequest.prototype.setDeployerAddr = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WhitelistUserDeployerRequest.prototype.clearDeployerAddr = function() {
  this.setDeployerAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.WhitelistUserDeployerRequest.prototype.hasDeployerAddr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TierID tier_id = 2;
 * @return {!proto.TierID}
 */
proto.WhitelistUserDeployerRequest.prototype.getTierId = function() {
  return /** @type {!proto.TierID} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.TierID} value  */
proto.WhitelistUserDeployerRequest.prototype.setTierId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UserState.repeatedFields_, null);
};
goog.inherits(proto.UserState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UserState.displayName = 'proto.UserState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UserState.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserState.prototype.toObject = function(opt_includeInstance) {
  return proto.UserState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserState} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UserState.toObject = function(includeInstance, msg) {
  var f, obj = {
    userAddr: (f = msg.getUserAddr()) && proto_loom_pb.Address.toObject(includeInstance, f),
    deployersList: jspb.Message.toObjectList(msg.getDeployersList(),
    proto_loom_pb.Address.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserState}
 */
proto.UserState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserState;
  return proto.UserState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserState}
 */
proto.UserState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setUserAddr(value);
      break;
    case 2:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.getDeployersList().push(value);
      msg.setDeployersList(msg.getDeployersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UserState} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UserState.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UserState.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserAddr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = this.getDeployersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UserState} The clone.
 */
proto.UserState.prototype.cloneMessage = function() {
  return /** @type {!proto.UserState} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Address user_addr = 1;
 * @return {proto.Address}
 */
proto.UserState.prototype.getUserAddr = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {proto.Address|undefined} value  */
proto.UserState.prototype.setUserAddr = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UserState.prototype.clearUserAddr = function() {
  this.setUserAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UserState.prototype.hasUserAddr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Address deployers = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Address>}
 */
proto.UserState.prototype.getDeployersList = function() {
  return /** @type{!Array.<!proto.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_loom_pb.Address, 2));
};


/** @param {Array.<!proto.Address>} value  */
proto.UserState.prototype.setDeployersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.UserState.prototype.clearDeployersList = function() {
  this.setDeployersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserDeployerState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UserDeployerState.repeatedFields_, null);
};
goog.inherits(proto.UserDeployerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UserDeployerState.displayName = 'proto.UserDeployerState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UserDeployerState.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserDeployerState.prototype.toObject = function(opt_includeInstance) {
  return proto.UserDeployerState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserDeployerState} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UserDeployerState.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: (f = msg.getAddress()) && proto_loom_pb.Address.toObject(includeInstance, f),
    contractsList: jspb.Message.toObjectList(msg.getContractsList(),
    proto.DeployerContract.toObject, includeInstance),
    tierId: msg.getTierId(),
    inactive: msg.getInactive()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserDeployerState}
 */
proto.UserDeployerState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserDeployerState;
  return proto.UserDeployerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserDeployerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserDeployerState}
 */
proto.UserDeployerState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.DeployerContract;
      reader.readMessage(value,proto.DeployerContract.deserializeBinaryFromReader);
      msg.getContractsList().push(value);
      msg.setContractsList(msg.getContractsList());
      break;
    case 3:
      var value = /** @type {!proto.TierID} */ (reader.readEnum());
      msg.setTierId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UserDeployerState} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UserDeployerState.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserDeployerState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UserDeployerState.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = this.getContractsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.DeployerContract.serializeBinaryToWriter
    );
  }
  f = this.getTierId();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getInactive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UserDeployerState} The clone.
 */
proto.UserDeployerState.prototype.cloneMessage = function() {
  return /** @type {!proto.UserDeployerState} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Address address = 1;
 * @return {proto.Address}
 */
proto.UserDeployerState.prototype.getAddress = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {proto.Address|undefined} value  */
proto.UserDeployerState.prototype.setAddress = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UserDeployerState.prototype.clearAddress = function() {
  this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UserDeployerState.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated DeployerContract contracts = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.DeployerContract>}
 */
proto.UserDeployerState.prototype.getContractsList = function() {
  return /** @type{!Array.<!proto.DeployerContract>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DeployerContract, 2));
};


/** @param {Array.<!proto.DeployerContract>} value  */
proto.UserDeployerState.prototype.setContractsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.UserDeployerState.prototype.clearContractsList = function() {
  this.setContractsList([]);
};


/**
 * optional TierID tier_id = 3;
 * @return {!proto.TierID}
 */
proto.UserDeployerState.prototype.getTierId = function() {
  return /** @type {!proto.TierID} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.TierID} value  */
proto.UserDeployerState.prototype.setTierId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool inactive = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UserDeployerState.prototype.getInactive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.UserDeployerState.prototype.setInactive = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetUserDeployersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetUserDeployersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetUserDeployersRequest.displayName = 'proto.GetUserDeployersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetUserDeployersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetUserDeployersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetUserDeployersRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetUserDeployersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userAddr: (f = msg.getUserAddr()) && proto_loom_pb.Address.toObject(includeInstance, f),
    includeInactive: msg.getIncludeInactive()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetUserDeployersRequest}
 */
proto.GetUserDeployersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetUserDeployersRequest;
  return proto.GetUserDeployersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetUserDeployersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetUserDeployersRequest}
 */
proto.GetUserDeployersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setUserAddr(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeInactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetUserDeployersRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetUserDeployersRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetUserDeployersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetUserDeployersRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserAddr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
  f = this.getIncludeInactive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetUserDeployersRequest} The clone.
 */
proto.GetUserDeployersRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.GetUserDeployersRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Address user_addr = 1;
 * @return {proto.Address}
 */
proto.GetUserDeployersRequest.prototype.getUserAddr = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {proto.Address|undefined} value  */
proto.GetUserDeployersRequest.prototype.setUserAddr = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetUserDeployersRequest.prototype.clearUserAddr = function() {
  this.setUserAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.GetUserDeployersRequest.prototype.hasUserAddr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool include_inactive = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GetUserDeployersRequest.prototype.getIncludeInactive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.GetUserDeployersRequest.prototype.setIncludeInactive = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetUserDeployersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetUserDeployersResponse.repeatedFields_, null);
};
goog.inherits(proto.GetUserDeployersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetUserDeployersResponse.displayName = 'proto.GetUserDeployersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetUserDeployersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetUserDeployersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetUserDeployersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetUserDeployersResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetUserDeployersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployersList: jspb.Message.toObjectList(msg.getDeployersList(),
    proto.UserDeployerState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetUserDeployersResponse}
 */
proto.GetUserDeployersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetUserDeployersResponse;
  return proto.GetUserDeployersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetUserDeployersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetUserDeployersResponse}
 */
proto.GetUserDeployersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UserDeployerState;
      reader.readMessage(value,proto.UserDeployerState.deserializeBinaryFromReader);
      msg.getDeployersList().push(value);
      msg.setDeployersList(msg.getDeployersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetUserDeployersResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetUserDeployersResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetUserDeployersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetUserDeployersResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeployersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.UserDeployerState.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetUserDeployersResponse} The clone.
 */
proto.GetUserDeployersResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.GetUserDeployersResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated UserDeployerState deployers = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.UserDeployerState>}
 */
proto.GetUserDeployersResponse.prototype.getDeployersList = function() {
  return /** @type{!Array.<!proto.UserDeployerState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UserDeployerState, 1));
};


/** @param {Array.<!proto.UserDeployerState>} value  */
proto.GetUserDeployersResponse.prototype.setDeployersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.GetUserDeployersResponse.prototype.clearDeployersList = function() {
  this.setDeployersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetDeployedContractsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetDeployedContractsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetDeployedContractsRequest.displayName = 'proto.GetDeployedContractsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetDeployedContractsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetDeployedContractsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetDeployedContractsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetDeployedContractsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployerAddr: (f = msg.getDeployerAddr()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetDeployedContractsRequest}
 */
proto.GetDeployedContractsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetDeployedContractsRequest;
  return proto.GetDeployedContractsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetDeployedContractsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetDeployedContractsRequest}
 */
proto.GetDeployedContractsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setDeployerAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetDeployedContractsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetDeployedContractsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetDeployedContractsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetDeployedContractsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeployerAddr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetDeployedContractsRequest} The clone.
 */
proto.GetDeployedContractsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.GetDeployedContractsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Address deployer_addr = 1;
 * @return {proto.Address}
 */
proto.GetDeployedContractsRequest.prototype.getDeployerAddr = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {proto.Address|undefined} value  */
proto.GetDeployedContractsRequest.prototype.setDeployerAddr = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetDeployedContractsRequest.prototype.clearDeployerAddr = function() {
  this.setDeployerAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.GetDeployedContractsRequest.prototype.hasDeployerAddr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetDeployedContractsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetDeployedContractsResponse.repeatedFields_, null);
};
goog.inherits(proto.GetDeployedContractsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetDeployedContractsResponse.displayName = 'proto.GetDeployedContractsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetDeployedContractsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetDeployedContractsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetDeployedContractsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetDeployedContractsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetDeployedContractsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractAddressesList: jspb.Message.toObjectList(msg.getContractAddressesList(),
    proto.DeployerContract.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetDeployedContractsResponse}
 */
proto.GetDeployedContractsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetDeployedContractsResponse;
  return proto.GetDeployedContractsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetDeployedContractsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetDeployedContractsResponse}
 */
proto.GetDeployedContractsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DeployerContract;
      reader.readMessage(value,proto.DeployerContract.deserializeBinaryFromReader);
      msg.getContractAddressesList().push(value);
      msg.setContractAddressesList(msg.getContractAddressesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetDeployedContractsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetDeployedContractsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetDeployedContractsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetDeployedContractsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContractAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DeployerContract.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetDeployedContractsResponse} The clone.
 */
proto.GetDeployedContractsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.GetDeployedContractsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated DeployerContract contract_addresses = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.DeployerContract>}
 */
proto.GetDeployedContractsResponse.prototype.getContractAddressesList = function() {
  return /** @type{!Array.<!proto.DeployerContract>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DeployerContract, 1));
};


/** @param {Array.<!proto.DeployerContract>} value  */
proto.GetDeployedContractsResponse.prototype.setContractAddressesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.GetDeployedContractsResponse.prototype.clearContractAddressesList = function() {
  this.setContractAddressesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetTierInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetTierInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetTierInfoRequest.displayName = 'proto.GetTierInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetTierInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetTierInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetTierInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetTierInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetTierInfoRequest}
 */
proto.GetTierInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetTierInfoRequest;
  return proto.GetTierInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetTierInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetTierInfoRequest}
 */
proto.GetTierInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TierID} */ (reader.readEnum());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetTierInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetTierInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetTierInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetTierInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetTierInfoRequest} The clone.
 */
proto.GetTierInfoRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.GetTierInfoRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional TierID id = 1;
 * @return {!proto.TierID}
 */
proto.GetTierInfoRequest.prototype.getId = function() {
  return /** @type {!proto.TierID} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.TierID} value  */
proto.GetTierInfoRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetTierInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetTierInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetTierInfoResponse.displayName = 'proto.GetTierInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetTierInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetTierInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetTierInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetTierInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tier: (f = msg.getTier()) && proto.Tier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetTierInfoResponse}
 */
proto.GetTierInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetTierInfoResponse;
  return proto.GetTierInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetTierInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetTierInfoResponse}
 */
proto.GetTierInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Tier;
      reader.readMessage(value,proto.Tier.deserializeBinaryFromReader);
      msg.setTier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetTierInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetTierInfoResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetTierInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetTierInfoResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTier();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Tier.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetTierInfoResponse} The clone.
 */
proto.GetTierInfoResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.GetTierInfoResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Tier tier = 1;
 * @return {proto.Tier}
 */
proto.GetTierInfoResponse.prototype.getTier = function() {
  return /** @type{proto.Tier} */ (
    jspb.Message.getWrapperField(this, proto.Tier, 1));
};


/** @param {proto.Tier|undefined} value  */
proto.GetTierInfoResponse.prototype.setTier = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetTierInfoResponse.prototype.clearTier = function() {
  this.setTier(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.GetTierInfoResponse.prototype.hasTier = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetTierInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetTierInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetTierInfoRequest.displayName = 'proto.SetTierInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetTierInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SetTierInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetTierInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SetTierInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    fee: (f = msg.getFee()) && proto_loom_pb.BigUInt.toObject(includeInstance, f),
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetTierInfoRequest}
 */
proto.SetTierInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetTierInfoRequest;
  return proto.SetTierInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetTierInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetTierInfoRequest}
 */
proto.SetTierInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TierID} */ (reader.readEnum());
      msg.setId(value);
      break;
    case 2:
      var value = new proto_loom_pb.BigUInt;
      reader.readMessage(value,proto_loom_pb.BigUInt.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SetTierInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SetTierInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetTierInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SetTierInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_loom_pb.BigUInt.serializeBinaryToWriter
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SetTierInfoRequest} The clone.
 */
proto.SetTierInfoRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.SetTierInfoRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional TierID id = 1;
 * @return {!proto.TierID}
 */
proto.SetTierInfoRequest.prototype.getId = function() {
  return /** @type {!proto.TierID} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.TierID} value  */
proto.SetTierInfoRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional BigUInt fee = 2;
 * @return {proto.BigUInt}
 */
proto.SetTierInfoRequest.prototype.getFee = function() {
  return /** @type{proto.BigUInt} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.BigUInt, 2));
};


/** @param {proto.BigUInt|undefined} value  */
proto.SetTierInfoRequest.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SetTierInfoRequest.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SetTierInfoRequest.prototype.hasFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.SetTierInfoRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.SetTierInfoRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveUserDeployerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveUserDeployerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveUserDeployerRequest.displayName = 'proto.RemoveUserDeployerRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveUserDeployerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveUserDeployerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveUserDeployerRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RemoveUserDeployerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployerAddr: (f = msg.getDeployerAddr()) && proto_loom_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveUserDeployerRequest}
 */
proto.RemoveUserDeployerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveUserDeployerRequest;
  return proto.RemoveUserDeployerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveUserDeployerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveUserDeployerRequest}
 */
proto.RemoveUserDeployerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_loom_pb.Address;
      reader.readMessage(value,proto_loom_pb.Address.deserializeBinaryFromReader);
      msg.setDeployerAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.RemoveUserDeployerRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemoveUserDeployerRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveUserDeployerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemoveUserDeployerRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeployerAddr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_loom_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.RemoveUserDeployerRequest} The clone.
 */
proto.RemoveUserDeployerRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.RemoveUserDeployerRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Address deployer_addr = 1;
 * @return {proto.Address}
 */
proto.RemoveUserDeployerRequest.prototype.getDeployerAddr = function() {
  return /** @type{proto.Address} */ (
    jspb.Message.getWrapperField(this, proto_loom_pb.Address, 1));
};


/** @param {proto.Address|undefined} value  */
proto.RemoveUserDeployerRequest.prototype.setDeployerAddr = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.RemoveUserDeployerRequest.prototype.clearDeployerAddr = function() {
  this.setDeployerAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.RemoveUserDeployerRequest.prototype.hasDeployerAddr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.TierID = {
  DEFAULT: 0
};

goog.object.extend(exports, proto);
